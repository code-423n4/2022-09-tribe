import { computeBatchProposalId } from '@scripts/utils/constructProposalCalldata';
import { expect } from 'chai';
import { BigNumber } from 'ethers';

const toBN = BigNumber.from;

describe('Compute proposal ID off-chain', () => {
  it('should compute proposalId for a batched proposal', () => {
    // Fixture is a real-transaction submitted on-chain
    const expectedProposalId = '0x81c419dbb3c44645493c214eee0ceaf273ba870d1e7e1c48422e2762f60e0db4';
    const targets = [
      '0x02435948F84d7465FB71dE45ABa6098Fc6eC2993',
      '0x02435948F84d7465FB71dE45ABa6098Fc6eC2993',
      '0x02435948F84d7465FB71dE45ABa6098Fc6eC2993',
      '0xF7991f4698ffb6716982aec7F78964Dd731C4A54',
      '0xFF6f59333cfD8f4Ebc14aD0a0E181a83e655d257',
      '0xFF6f59333cfD8f4Ebc14aD0a0E181a83e655d257',
      '0x98E5F5706897074a4664DD3a32eB80242d6E694B'
    ];
    const values = [toBN(0), toBN(0), toBN(0), toBN(0), toBN(0), toBN(0), toBN(0)];
    const payloads = [
      '0x8320357d00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000f7991f4698ffb6716982aec7f78964dd731c4a54',
      '0xfe68d76e0000000000000000000000005b86887e171bae0c2c826e87e34df8d558c079b9000000000000000000000000f7991f4698ffb6716982aec7f78964dd731c4a5400000000000000000000000000000000000000000000043c33c193756480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
      '0xfe68d76e000000000000000000000000e0f73b8d76d2ad33492f995af218b03564b8ce20000000000000000000000000f7991f4698ffb6716982aec7f78964dd731c4a54000000000000000000000000000000000000000000027b46536c66c8e300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
      '0x8119c065',
      '0xdea02892000000000000000000000000df9ff5c077d9f3427ade67ac2d27a864be6f3187',
      '0xdea02892000000000000000000000000f24401f6992faeacbc5d6c6991db15b5f8364a1b',
      '0x5d841af5000000000000000000000000000000000000000000000000000000000000003c'
    ];
    const predecessor = '0x0000000000000000000000000000000000000000000000000000000000000000';
    const salt = '0x0d0c2b4e41c5fdf9375f2b1601caf0af18e81d6257ea3abb3b72a989fc3698da';

    const proposalId = computeBatchProposalId(targets, values, payloads, predecessor, salt);
    expect(proposalId).to.be.equal(expectedProposalId);
  });
});
